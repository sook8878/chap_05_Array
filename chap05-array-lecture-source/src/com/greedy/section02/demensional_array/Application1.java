package com.greedy.section02.demensional_array;

public class Application1 {
	public static void main(String[] args) {
		
		// 다차원 배열
		/*
		 * 다차원 배열은 2차원 이상의 배열을 의미한다.
		 * 배열의 인덱스 마다 또 다른 배열의 주소를 보관하는 배열을 의미한다.
		 * 즉, 2차원 배열은 1차원 배열 여러개를 하나로 묶어서 관리하는 배열을 의미한다.
		 * 
		 */
		
		/*
		 * 2차원 배열을 사용하는 방법
		 * 1. 배열의 주소를 보관할 레퍼런스 변수 선언(stack) *****************
		 * 2. 여러개의 1차원 배열의 주소를 관리하는 배열을 생성 (heap)
		 * 3. 각 인덱스에서 관리하는 배열을 할당(heap)하여 주소를 보관하는 배열에 저장
		 * 4. 생성한 여러개의 1차원 배열에 차례로 접근해서 사용
		 * 
		 * 
		 * */
		
		// 1. 배열의 주소를 보관할 레퍼런스 변수 선언(stack)
		int[][] iarr1;
		int iarr2[][];
		int[] iarr3[];
		
		//  2. 여러개의 1차원 배열의 주소를 관리하는 배열을 생성 (heap)

//		iarr1 = new int[][];   // 크기를 지정하지 않으면 에러 발생
//		iarr1 = new int[][4];  // 주소를 묶어서 관리할 배열의 크기를 지정하지 않으면 에러가 발생
		iarr1 = new int[3][];  // 행만 만들어 사용하는건 가능.
		
		
		/* 서로 같은 길이의 여러개의 배열을 하나로 묶어서 관리하는 2차원 배열 -> 정변배열 */
		//  3. 주소를 관리하는 배열의 인덱스 마다 배열을 할당. (heap)
		// 각행마다 (방) 작은방의 갯수를 다르게 할 수 있다. 로 하면 모든 행의 배열갯수 같게할 수 있음.
		// int[][] arr = new int[3][5]
		
		iarr1[0] = new int[5]; // iarr1 의 길이  = 3 , iarr1[0] 의 길이 = 5
		iarr1[1] = new int[5];
		iarr1[2] = new int[5];
		// 이것도 가능.
		
	
		
		
		/* 서로 길이가 같지 않은 여러 개의 배열을 하나로 묶어서 관리하는 2차원 배열을 -> 가변 배열 */
		
		//  4. 중첩 for문을 이용해서 배열의 값 출력
		for(int i =0; i < iarr1.length; i++) {
			
			// 각 인덱스의 배열값을 차례로 출력
			for(int j = 0; j < iarr1[i].length; j++) {
				System.out.print(iarr1[i][j]+" ");
			}
			System.out.println();
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}

}
